var _user$project$Graphics$blockRGB = function (b) {
	var _p0 = b;
	switch (_p0.ctor) {
		case 'E':
			return A3(_elm_lang$core$Color$rgb, 211, 211, 211);
		case 'Cyan':
			return A3(_elm_lang$core$Color$rgb, 0, 255, 255);
		case 'Yellow':
			return A3(_elm_lang$core$Color$rgb, 255, 255, 0);
		case 'Purple':
			return A3(_elm_lang$core$Color$rgb, 128, 0, 128);
		case 'Green':
			return A3(_elm_lang$core$Color$rgb, 0, 255, 0);
		case 'Red':
			return A3(_elm_lang$core$Color$rgb, 255, 0, 0);
		case 'Blue':
			return A3(_elm_lang$core$Color$rgb, 0, 0, 255);
		default:
			return A3(_elm_lang$core$Color$rgb, 255, 165, 0);
	}
};
var _user$project$Graphics$pixWidth = 200;
var _user$project$Graphics$blockWidth = (_user$project$Graphics$pixWidth / 10) | 0;
var _user$project$Graphics$drawBlock = F2(
	function (i, b) {
		var y = _elm_lang$core$Basics$toFloat(_user$project$Graphics$pixWidth - (_user$project$Graphics$blockWidth * ((i / 10) | 0)));
		var x = _elm_lang$core$Basics$toFloat(
			_user$project$Graphics$blockWidth * A2(_elm_lang$core$Basics_ops['%'], i, 10));
		var f = A2(
			_evancz$elm_graphics$Collage$filled,
			_user$project$Graphics$blockRGB(b),
			_evancz$elm_graphics$Collage$square(
				_elm_lang$core$Basics$toFloat(_user$project$Graphics$blockWidth)));
		return A2(
			_evancz$elm_graphics$Collage$move,
			{ctor: '_Tuple2', _0: x, _1: y},
			f);
	});
var _user$project$Graphics$toForms = function (b) {
	return _elm_lang$core$Array$toList(
		A2(_elm_lang$core$Array$indexedMap, _user$project$Graphics$drawBlock, b));
};
var _user$project$Graphics$drawPosition = F2(
	function (c, _p1) {
		var _p2 = _p1;
		var yoff = _elm_lang$core$Basics$toFloat((_user$project$Graphics$blockWidth * _p2._1) - _user$project$Graphics$pixWidth);
		var xoff = _elm_lang$core$Basics$toFloat(_user$project$Graphics$blockWidth * _p2._0);
		var f = A2(
			_evancz$elm_graphics$Collage$filled,
			c,
			_evancz$elm_graphics$Collage$square(
				_elm_lang$core$Basics$toFloat(_user$project$Graphics$blockWidth)));
		return A2(
			_evancz$elm_graphics$Collage$move,
			{ctor: '_Tuple2', _0: xoff, _1: 0 - yoff},
			f);
	});
var _user$project$Graphics$drawTetromino = function (t) {
	var _p3 = t;
	var tetro = _p3.tetro;
	var current = _p3.current;
	var position = _p3.position;
	var c = _elm_lang$core$Native_Utils.eq(tetro, _user$project$TetroType$l_type) ? _user$project$Graphics$blockRGB(_user$project$Board$Orange) : (_elm_lang$core$Native_Utils.eq(tetro, _user$project$TetroType$i_type) ? _user$project$Graphics$blockRGB(_user$project$Board$Cyan) : (_elm_lang$core$Native_Utils.eq(tetro, _user$project$TetroType$t_type) ? _user$project$Graphics$blockRGB(_user$project$Board$Purple) : (_elm_lang$core$Native_Utils.eq(tetro, _user$project$TetroType$o_type) ? _user$project$Graphics$blockRGB(_user$project$Board$Yellow) : (_elm_lang$core$Native_Utils.eq(tetro, _user$project$TetroType$s_type) ? _user$project$Graphics$blockRGB(_user$project$Board$Green) : (_elm_lang$core$Native_Utils.eq(tetro, _user$project$TetroType$j_type) ? _user$project$Graphics$blockRGB(_user$project$Board$Blue) : _user$project$Graphics$blockRGB(_user$project$Board$Red))))));
	return A2(
		_elm_lang$core$List$map,
		_user$project$Graphics$drawPosition(c),
		current);
};
var _user$project$Graphics$drawBoard = function (b) {
	var sz = 3 * _user$project$Graphics$pixWidth;
	return A3(
		_evancz$elm_graphics$Collage$collage,
		sz,
		sz,
		_user$project$Graphics$toForms(b));
};
var _user$project$Graphics$drawGame = F2(
	function (b, t) {
		var sz = 3 * _user$project$Graphics$pixWidth;
		return A3(
			_evancz$elm_graphics$Collage$collage,
			sz,
			sz,
			A2(
				_elm_lang$core$Basics_ops['++'],
				_user$project$Graphics$toForms(b),
				_user$project$Graphics$drawTetromino(t)));
	});
